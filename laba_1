class Fraction
{
    private int numerator;
    private int denominator;

    public Fraction(int numerator, int denominator)
    {
        if (denominator == 0) 
        {
            throw new NotCorretlydenomiratorException("знаменатель не может быть равен нулю");
        }

        this.numerator = numerator;
        this.denominator = denominator;
        Simplify();
    }

    public int Numerator { get => numerator; set => numerator = value; }
    public int Denominator { get => denominator; set => denominator = value; }

    public double DecimalValue => (double)numerator / denominator;

    private void Simplify()
    {
        int gcd = GCD(numerator, denominator);
        numerator /= gcd;
        denominator /= gcd;
    }

    private static int GCD(int a, int b)
    {
        while (b != 0)
        {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    public static Fraction operator +(Fraction f1, Fraction f2)
    {
        int newNumerator = f1.numerator * f2.denominator + f2.numerator * f1.denominator;
        int newDenominator = f1.denominator * f2.denominator;
        return new Fraction(newNumerator, newDenominator);
    }

    public static Fraction operator -(Fraction f1, Fraction f2)
    {
        int newNumerator = f1.numerator * f2.denominator - f2.numerator * f1.denominator;
        int newDenominator = f1.denominator * f2.denominator;
        return new Fraction(newNumerator, newDenominator);
    }

    public static Fraction operator *(Fraction f1, Fraction f2)
    {
        int newNumerator = f1.numerator * f2.numerator;
        int newDenominator = f1.denominator * f2.denominator;
        return new Fraction(newNumerator, newDenominator);
    }

    public static Fraction operator /(Fraction f1, Fraction f2)
    {
      
        if (f2.numerator == 0)
            throw new DivideByZeroException("Деление на ноль невозможно!");
        int newNumerator = f1.numerator * f2.denominator;
        int newDenominator = f1.denominator * f2.numerator;
        return new Fraction(newNumerator, newDenominator);
    }

    public override string ToString()
    {
        return $"{numerator}/{denominator}";
    }
}
public class NotCorretlydenomiratorException : Exception 
{
    public NotCorretlydenomiratorException(string messege) : base(messege)
    {

    }
}
